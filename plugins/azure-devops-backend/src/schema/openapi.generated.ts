/*
 * Copyright 2023 The Backstage Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// ******************************************************************
// * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. *
// ******************************************************************
import { createValidatedOpenApiRouter } from '@backstage/backend-openapi-utils';

export const spec = {
  openapi: '3.0.3',
  info: {
    title: 'Swagger Petstore - OpenAPI 3.0',
    version: 'v1',
  },
  paths: {
    '/build-definitions/{projectName}/{definitionName}': {
      get: {
        parameters: [
          {
            in: 'path',
            name: 'projectName',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            in: 'path',
            name: 'definitionName',
            required: true,
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: '200 response',
            content: {
              'application/json; charset=utf-8': {
                schema: {
                  $ref: '#/components/schemas/GetBuild-definitionsProjectnameDefinitionname200ResponseBody',
                },
              },
            },
          },
        },
      },
    },
    '/builds/{projectName}/{repoId}': {
      get: {
        parameters: [
          {
            in: 'path',
            name: 'projectName',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            in: 'path',
            name: 'repoId',
            required: true,
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: '200 response',
            content: {
              'application/json; charset=utf-8': {
                schema: {
                  $ref: '#/components/schemas/GetBuildsProjectnameRepoid200ResponseBody',
                },
              },
            },
          },
        },
      },
    },
    '/builds/{projectName}': {
      get: {
        parameters: [
          {
            in: 'path',
            name: 'projectName',
            required: true,
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: '200 response',
            content: {
              'application/json; charset=utf-8': {
                schema: {
                  $ref: '#/components/schemas/GetBuildsProjectname200ResponseBody',
                },
              },
            },
          },
        },
      },
    },
    '/git-tags/{projectName}/{repoName}': {
      get: {
        parameters: [
          {
            in: 'path',
            name: 'projectName',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            in: 'path',
            name: 'repoName',
            required: true,
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: '200 response',
            content: {
              'application/json; charset=utf-8': {
                schema: {
                  $ref: '#/components/schemas/GetGit-tagsProjectnameReponame200ResponseBody',
                },
              },
            },
          },
        },
      },
    },
    '/health': {
      get: {
        responses: {
          '200': {
            description: '200 response',
            content: {
              'application/json; charset=utf-8': {
                schema: {
                  $ref: '#/components/schemas/GetHealth200ResponseBody',
                },
              },
            },
          },
        },
      },
    },
    '/pull-requests/{projectName}/{repoName}': {
      get: {
        parameters: [
          {
            in: 'path',
            name: 'projectName',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            in: 'path',
            name: 'repoName',
            required: true,
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: '200 response',
            content: {
              'application/json; charset=utf-8': {
                schema: {
                  $ref: '#/components/schemas/GetPull-requestsProjectnameReponame200ResponseBody',
                },
              },
            },
          },
        },
      },
    },
    '/readme/{projectName}/{repoName}': {
      get: {
        parameters: [
          {
            in: 'path',
            name: 'projectName',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            in: 'path',
            name: 'repoName',
            required: true,
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: '200 response',
            content: {
              'application/json; charset=utf-8': {
                schema: {
                  $ref: '#/components/schemas/GetReadmeProjectnameReponame200ResponseBody',
                },
              },
            },
          },
        },
      },
    },
    '/repo-builds/{projectName}/{repoName}': {
      get: {
        parameters: [
          {
            in: 'path',
            name: 'projectName',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            in: 'path',
            name: 'repoName',
            required: true,
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: '200 response',
            content: {
              'application/json; charset=utf-8': {
                schema: {
                  $ref: '#/components/schemas/GetBuildsProjectname200ResponseBody',
                },
              },
            },
          },
        },
      },
    },
    '/repository/{projectName}/{repoName}': {
      get: {
        parameters: [
          {
            in: 'path',
            name: 'projectName',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            in: 'path',
            name: 'repoName',
            required: true,
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: '200 response',
            content: {
              'application/json; charset=utf-8': {
                schema: {
                  $ref: '#/components/schemas/GetRepositoryProjectnameReponame200ResponseBody',
                },
              },
            },
          },
        },
      },
    },
    '/users/{userId}/team-ids': {
      get: {
        parameters: [
          {
            in: 'path',
            name: 'userId',
            required: true,
            schema: {
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: '200 response',
            content: {
              'application/json; charset=utf-8': {
                schema: {
                  $ref: '#/components/schemas/GetUsersUseridTeam-ids200ResponseBody',
                },
              },
            },
          },
        },
      },
    },
  },
  components: {
    schemas: {
      'GetBuild-definitionsProjectnameDefinitionname200ResponseBody': {
        type: 'array',
        items: {
          type: 'object',
          properties: {
            id: {
              type: 'number',
            },
            name: {
              type: 'string',
            },
          },
          required: ['id', 'name'],
        },
      },
      GetBuildsProjectnameRepoid200ResponseBody: {
        type: 'array',
        items: {
          type: 'object',
          properties: {
            id: {
              type: 'number',
            },
            buildNumber: {
              type: 'string',
            },
            status: {
              type: 'number',
            },
            result: {
              type: 'number',
            },
            sourceBranch: {
              type: 'string',
            },
            sourceVersion: {
              type: 'string',
            },
          },
          required: [
            'id',
            'buildNumber',
            'status',
            'result',
            'sourceBranch',
            'sourceVersion',
          ],
        },
      },
      GetBuildsProjectname200ResponseBody: {
        type: 'array',
        items: {
          type: 'object',
          properties: {
            id: {
              type: 'number',
            },
            title: {
              type: 'string',
            },
            link: {
              type: 'string',
            },
            status: {
              type: 'number',
            },
            result: {
              type: 'number',
            },
            queueTime: {
              type: 'string',
            },
            source: {
              type: 'string',
            },
          },
          required: [
            'id',
            'title',
            'link',
            'status',
            'result',
            'queueTime',
            'source',
          ],
        },
      },
      'GetGit-tagsProjectnameReponame200ResponseBody': {
        type: 'array',
        items: {
          type: 'object',
          properties: {
            name: {
              type: 'string',
            },
            createdBy: {
              type: 'string',
            },
            commitLink: {
              type: 'string',
            },
            objectId: {
              type: 'string',
            },
            peeledObjectId: {
              type: 'string',
            },
            link: {
              type: 'string',
            },
          },
          required: [
            'name',
            'createdBy',
            'commitLink',
            'objectId',
            'peeledObjectId',
            'link',
          ],
        },
      },
      GetHealth200ResponseBody: {
        type: 'object',
        properties: {
          status: {
            type: 'string',
          },
        },
        required: ['status'],
      },
      'GetPull-requestsProjectnameReponame200ResponseBody': {
        type: 'array',
        items: {
          type: 'object',
          properties: {
            pullRequestId: {
              type: 'number',
            },
            repoName: {
              type: 'string',
            },
            title: {
              type: 'string',
            },
            createdBy: {
              type: 'string',
            },
            creationDate: {
              type: 'string',
            },
            sourceRefName: {
              type: 'string',
            },
            targetRefName: {
              type: 'string',
            },
            status: {
              type: 'number',
            },
            isDraft: {
              type: 'boolean',
            },
            link: {
              type: 'string',
            },
          },
          required: [
            'pullRequestId',
            'repoName',
            'title',
            'createdBy',
            'creationDate',
            'sourceRefName',
            'targetRefName',
            'status',
            'isDraft',
            'link',
          ],
        },
      },
      GetReadmeProjectnameReponame200ResponseBody: {
        type: 'object',
        properties: {
          content: {
            type: 'string',
          },
          url: {
            type: 'string',
          },
        },
        required: ['content', 'url'],
      },
      GetRepositoryProjectnameReponame200ResponseBody: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
          },
          name: {
            type: 'string',
          },
          url: {
            type: 'string',
          },
          defaultBranch: {
            type: 'string',
          },
          sshUrl: {
            type: 'string',
          },
          webUrl: {
            type: 'string',
          },
        },
        required: ['id', 'name', 'url', 'defaultBranch', 'sshUrl', 'webUrl'],
      },
      'GetUsersUseridTeam-ids200ResponseBody': {
        type: 'array',
        items: {},
      },
    },
  },
} as const;
export const createOpenApiRouter = async (
  options?: Parameters<typeof createValidatedOpenApiRouter>['1'],
) => createValidatedOpenApiRouter<typeof spec>(spec, options);
