/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const RefreshOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RefreshOptions",
    modelProperties: {
      authorizationToken: {
        serializedName: "authorizationToken",
        type: {
          name: "String"
        }
      },
      entityRef: {
        serializedName: "entityRef",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Entity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Entity",
    modelProperties: {
      relations: {
        serializedName: "relations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityRelation"
            }
          }
        }
      },
      spec: {
        serializedName: "spec",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Composite",
          className: "EntityMeta"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      apiVersion: {
        serializedName: "apiVersion",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityRelation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityRelation",
    modelProperties: {
      targetRef: {
        serializedName: "targetRef",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityMeta: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityMeta",
    modelProperties: {
      links: {
        serializedName: "links",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityLink"
            }
          }
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      annotations: {
        serializedName: "annotations",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      labels: {
        serializedName: "labels",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      uid: {
        serializedName: "uid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityLink: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityLink",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      icon: {
        serializedName: "icon",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityAncestryResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityAncestryResponse",
    modelProperties: {
      items: {
        serializedName: "items",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityAncestryResponseItemsItem"
            }
          }
        }
      },
      rootEntityRef: {
        serializedName: "rootEntityRef",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityAncestryResponseItemsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityAncestryResponseItemsItem",
    modelProperties: {
      parentEntityRefs: {
        serializedName: "parentEntityRefs",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      entity: {
        serializedName: "entity",
        type: {
          name: "Composite",
          className: "Entity"
        }
      }
    }
  }
};

export const EntitiesBatchResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntitiesBatchResponse",
    modelProperties: {
      items: {
        serializedName: "items",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntitiesBatchResponseItemsItem"
            }
          }
        }
      }
    }
  }
};

export const EntityFacetsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityFacetsResponse",
    modelProperties: {
      facets: {
        serializedName: "facets",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const PathsZ15EkiLocationsPostRequestbodyContentApplicationJsonSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "PathsZ15EkiLocationsPostRequestbodyContentApplicationJsonSchema",
    modelProperties: {
      presence: {
        serializedName: "presence",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Paths1Gg6W60LocationsPostResponses200ContentApplicationJsonSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "Paths1Gg6W60LocationsPostResponses200ContentApplicationJsonSchema",
    modelProperties: {
      exists: {
        serializedName: "exists",
        type: {
          name: "Boolean"
        }
      },
      entities: {
        serializedName: "entities",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Entity"
            }
          }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "Composite",
          className: "Location"
        }
      }
    }
  }
};

export const Location: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Location",
    modelProperties: {
      target: {
        serializedName: "target",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Get200ApplicationJsonItemsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Get200ApplicationJsonItemsItem",
    modelProperties: {
      data: {
        serializedName: "data",
        type: {
          name: "Composite",
          className: "Location"
        }
      }
    }
  }
};

export const Paths1B34Gt4AnalyzeLocationPostRequestbodyContentApplicationJsonSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "Paths1B34Gt4AnalyzeLocationPostRequestbodyContentApplicationJsonSchema",
    modelProperties: {
      catalogFileName: {
        serializedName: "catalogFileName",
        required: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "Composite",
          className: "LocationInput"
        }
      }
    }
  }
};

export const LocationInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocationInput",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        required: true,
        type: {
          name: "String"
        }
      },
      presence: {
        serializedName: "presence",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalyzeLocationResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeLocationResponse",
    modelProperties: {
      generateEntities: {
        serializedName: "generateEntities",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AnalyzeLocationGenerateEntity"
            }
          }
        }
      },
      existingEntityFiles: {
        serializedName: "existingEntityFiles",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AnalyzeLocationExistingEntity"
            }
          }
        }
      }
    }
  }
};

export const AnalyzeLocationGenerateEntity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeLocationGenerateEntity",
    modelProperties: {
      fields: {
        serializedName: "fields",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AnalyzeLocationEntityField"
            }
          }
        }
      },
      entity: {
        serializedName: "entity",
        type: {
          name: "Composite",
          className: "RecursivePartialEntity"
        }
      }
    }
  }
};

export const AnalyzeLocationEntityField: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeLocationEntityField",
    modelProperties: {
      description: {
        serializedName: "description",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        required: true,
        type: {
          name: "String"
        }
      },
      field: {
        serializedName: "field",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecursivePartialEntity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecursivePartialEntity",
    modelProperties: {
      apiVersion: {
        serializedName: "apiVersion",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Composite",
          className: "EntityMeta"
        }
      },
      spec: {
        serializedName: "spec",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      relations: {
        serializedName: "relations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EntityRelation"
            }
          }
        }
      }
    }
  }
};

export const AnalyzeLocationExistingEntity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeLocationExistingEntity",
    modelProperties: {
      entity: {
        serializedName: "entity",
        type: {
          name: "Composite",
          className: "Entity"
        }
      },
      isRegistered: {
        serializedName: "isRegistered",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "Composite",
          className: "LocationSpec"
        }
      }
    }
  }
};

export const LocationSpec: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocationSpec",
    modelProperties: {
      presence: {
        serializedName: "presence",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PathsJp8Sy2ValidateEntityPostRequestbodyContentApplicationJsonSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "PathsJp8Sy2ValidateEntityPostRequestbodyContentApplicationJsonSchema",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      entity: {
        serializedName: "entity",
        type: {
          name: "Composite",
          className: "Entity"
        }
      }
    }
  }
};

export const Paths1ExxmzkValidateEntityPostResponses200ContentApplicationJsonSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "Paths1ExxmzkValidateEntityPostResponses200ContentApplicationJsonSchema"
  }
};

export const Paths1032CnjValidateEntityPostResponses200ContentApplicationJsonSchemaAnyof0: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "Paths1032CnjValidateEntityPostResponses200ContentApplicationJsonSchemaAnyof0",
    modelProperties: {
      errors: {
        serializedName: "errors",
        type: {
          name: "Composite",
          className: "SerializedError"
        }
      }
    }
  }
};

export const SerializedError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SerializedError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      stack: {
        serializedName: "stack",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Paths1Rz5QutValidateEntityPostResponses200ContentApplicationJsonSchemaAnyof1: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "Paths1Rz5QutValidateEntityPostResponses200ContentApplicationJsonSchemaAnyof1",
    modelProperties: {
      errors: {
        serializedName: "errors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SerializedError"
            }
          }
        }
      }
    }
  }
};

export const EntitiesBatchResponseItemsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntitiesBatchResponseItemsItem",
    modelProperties: {
      ...Entity.type.modelProperties
    }
  }
};
