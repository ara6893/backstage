/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  RefreshOptions as RefreshOptionsMapper,
  PathsZ15EkiLocationsPostRequestbodyContentApplicationJsonSchema as PathsZ15EkiLocationsPostRequestbodyContentApplicationJsonSchemaMapper,
  Paths1B34Gt4AnalyzeLocationPostRequestbodyContentApplicationJsonSchema as Paths1B34Gt4AnalyzeLocationPostRequestbodyContentApplicationJsonSchemaMapper,
  PathsJp8Sy2ValidateEntityPostRequestbodyContentApplicationJsonSchema as PathsJp8Sy2ValidateEntityPostRequestbodyContentApplicationJsonSchemaMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: RefreshOptionsMapper
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "filter",
    type: {
      name: "String"
    }
  }
};

export const fields: OperationQueryParameter = {
  parameterPath: ["options", "fields"],
  mapper: {
    serializedName: "fields",
    type: {
      name: "String"
    }
  }
};

export const offset: OperationQueryParameter = {
  parameterPath: ["options", "offset"],
  mapper: {
    serializedName: "offset",
    type: {
      name: "String"
    }
  }
};

export const limit: OperationQueryParameter = {
  parameterPath: ["options", "limit"],
  mapper: {
    serializedName: "limit",
    type: {
      name: "String"
    }
  }
};

export const after: OperationQueryParameter = {
  parameterPath: ["options", "after"],
  mapper: {
    serializedName: "after",
    type: {
      name: "String"
    }
  }
};

export const uid: OperationURLParameter = {
  parameterPath: "uid",
  mapper: {
    serializedName: "uid",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const kind: OperationURLParameter = {
  parameterPath: "kind",
  mapper: {
    serializedName: "kind",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const namespace: OperationURLParameter = {
  parameterPath: "namespace",
  mapper: {
    serializedName: "namespace",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const name: OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: {
    serializedName: "body",
    required: true,
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  }
};

export const facet: OperationQueryParameter = {
  parameterPath: "facet",
  mapper: {
    serializedName: "facet",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body2: OperationParameter = {
  parameterPath: "body",
  mapper: PathsZ15EkiLocationsPostRequestbodyContentApplicationJsonSchemaMapper
};

export const dryRun: OperationQueryParameter = {
  parameterPath: ["options", "dryRun"],
  mapper: {
    serializedName: "dryRun",
    type: {
      name: "Boolean"
    }
  }
};

export const id: OperationURLParameter = {
  parameterPath: "id",
  mapper: {
    serializedName: "id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body3: OperationParameter = {
  parameterPath: "body",
  mapper: Paths1B34Gt4AnalyzeLocationPostRequestbodyContentApplicationJsonSchemaMapper
};

export const body4: OperationParameter = {
  parameterPath: "body",
  mapper: PathsJp8Sy2ValidateEntityPostRequestbodyContentApplicationJsonSchemaMapper
};
