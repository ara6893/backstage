/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  BackstagePluginCatalogBackendOptionalParams,
  RefreshOptions,
  RefreshEntityOptionalParams,
  GetEntitiesOptionalParams,
  GetEntitiesResponse,
  GetEntityByUidOptionalParams,
  GetEntityByUidResponse,
  GetEntityByNameOptionalParams,
  GetEntityByNameResponse,
  GetEntityAncestryByNameOptionalParams,
  GetEntityAncestryByNameResponse,
  GetEntitiesByRefsOptionalParams,
  GetEntitiesByRefsResponse,
  GetEntityFacetsOptionalParams,
  GetEntityFacetsResponse,
  PathsZ15EkiLocationsPostRequestbodyContentApplicationJsonSchema,
  CreateLocationOptionalParams,
  CreateLocationResponse,
  GetLocationsOptionalParams,
  GetLocationsResponse,
  GetLocationOptionalParams,
  GetLocationResponse,
  DeleteLocationOptionalParams,
  Paths1B34Gt4AnalyzeLocationPostRequestbodyContentApplicationJsonSchema,
  AnalyzeLocationOptionalParams,
  AnalyzeLocationOperationResponse,
  PathsJp8Sy2ValidateEntityPostRequestbodyContentApplicationJsonSchema,
  ValidateEntityOptionalParams,
  ValidateEntityResponse
} from "./models";

export class BackstagePluginCatalogBackend extends coreClient.ServiceClient {
  $host: string;

  /**
   * Initializes a new instance of the BackstagePluginCatalogBackend class.
   * @param $host server parameter
   * @param options The parameter options
   */
  constructor(
    $host: string,
    options?: BackstagePluginCatalogBackendOptionalParams
  ) {
    if ($host === undefined) {
      throw new Error("'$host' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: BackstagePluginCatalogBackendOptionalParams = {
      requestContentType: "application/json; charset=utf-8"
    };

    const packageDetails = `azsdk-js-catalog-client/1.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint: options.endpoint ?? options.baseUri ?? "{$host}"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }
    // Parameter assignments
    this.$host = $host;
  }

  /**
   * @param body Options for requesting a refresh of entities in the catalog.
   * @param options The options parameters.
   */
  refreshEntity(
    body: RefreshOptions,
    options?: RefreshEntityOptionalParams
  ): Promise<void> {
    return this.sendOperationRequest(
      { body, options },
      refreshEntityOperationSpec
    );
  }

  /** @param options The options parameters. */
  getEntities(
    options?: GetEntitiesOptionalParams
  ): Promise<GetEntitiesResponse> {
    return this.sendOperationRequest({ options }, getEntitiesOperationSpec);
  }

  /**
   * @param uid
   * @param options The options parameters.
   */
  getEntityByUid(
    uid: string,
    options?: GetEntityByUidOptionalParams
  ): Promise<GetEntityByUidResponse> {
    return this.sendOperationRequest(
      { uid, options },
      getEntityByUidOperationSpec
    );
  }

  /**
   * @param kind
   * @param namespace
   * @param name
   * @param options The options parameters.
   */
  getEntityByName(
    kind: string,
    namespace: string,
    name: string,
    options?: GetEntityByNameOptionalParams
  ): Promise<GetEntityByNameResponse> {
    return this.sendOperationRequest(
      { kind, namespace, name, options },
      getEntityByNameOperationSpec
    );
  }

  /**
   * @param kind
   * @param namespace
   * @param name
   * @param options The options parameters.
   */
  getEntityAncestryByName(
    kind: string,
    namespace: string,
    name: string,
    options?: GetEntityAncestryByNameOptionalParams
  ): Promise<GetEntityAncestryByNameResponse> {
    return this.sendOperationRequest(
      { kind, namespace, name, options },
      getEntityAncestryByNameOperationSpec
    );
  }

  /**
   * @param body Array of PostContentSchemaItem
   * @param options The options parameters.
   */
  getEntitiesByRefs(
    body: string[],
    options?: GetEntitiesByRefsOptionalParams
  ): Promise<GetEntitiesByRefsResponse> {
    return this.sendOperationRequest(
      { body, options },
      getEntitiesByRefsOperationSpec
    );
  }

  /**
   * @param facet
   * @param options The options parameters.
   */
  getEntityFacets(
    facet: string,
    options?: GetEntityFacetsOptionalParams
  ): Promise<GetEntityFacetsResponse> {
    return this.sendOperationRequest(
      { facet, options },
      getEntityFacetsOperationSpec
    );
  }

  /**
   * @param body
   * @param options The options parameters.
   */
  createLocation(
    body: PathsZ15EkiLocationsPostRequestbodyContentApplicationJsonSchema,
    options?: CreateLocationOptionalParams
  ): Promise<CreateLocationResponse> {
    return this.sendOperationRequest(
      { body, options },
      createLocationOperationSpec
    );
  }

  /** @param options The options parameters. */
  getLocations(
    options?: GetLocationsOptionalParams
  ): Promise<GetLocationsResponse> {
    return this.sendOperationRequest({ options }, getLocationsOperationSpec);
  }

  /**
   * @param id
   * @param options The options parameters.
   */
  getLocation(
    id: string,
    options?: GetLocationOptionalParams
  ): Promise<GetLocationResponse> {
    return this.sendOperationRequest({ id, options }, getLocationOperationSpec);
  }

  /**
   * @param id
   * @param options The options parameters.
   */
  deleteLocation(
    id: string,
    options?: DeleteLocationOptionalParams
  ): Promise<void> {
    return this.sendOperationRequest(
      { id, options },
      deleteLocationOperationSpec
    );
  }

  /**
   * @param body
   * @param options The options parameters.
   */
  analyzeLocation(
    body: Paths1B34Gt4AnalyzeLocationPostRequestbodyContentApplicationJsonSchema,
    options?: AnalyzeLocationOptionalParams
  ): Promise<AnalyzeLocationOperationResponse> {
    return this.sendOperationRequest(
      { body, options },
      analyzeLocationOperationSpec
    );
  }

  /**
   * @param body
   * @param options The options parameters.
   */
  validateEntity(
    body: PathsJp8Sy2ValidateEntityPostRequestbodyContentApplicationJsonSchema,
    options?: ValidateEntityOptionalParams
  ): Promise<ValidateEntityResponse> {
    return this.sendOperationRequest(
      { body, options },
      validateEntityOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const refreshEntityOperationSpec: coreClient.OperationSpec = {
  path: "/refresh",
  httpMethod: "POST",
  responses: { 200: {} },
  requestBody: Parameters.body,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getEntitiesOperationSpec: coreClient.OperationSpec = {
  path: "/entities",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Entity" } }
        }
      }
    }
  },
  queryParameters: [
    Parameters.filter,
    Parameters.fields,
    Parameters.offset,
    Parameters.limit,
    Parameters.after
  ],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getEntityByUidOperationSpec: coreClient.OperationSpec = {
  path: "/entities/by-uid/{uid}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Entity
    }
  },
  urlParameters: [Parameters.$host, Parameters.uid],
  headerParameters: [Parameters.accept],
  serializer
};
const getEntityByNameOperationSpec: coreClient.OperationSpec = {
  path: "/entities/by-name/{kind}/{namespace}/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Entity
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.kind,
    Parameters.namespace,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getEntityAncestryByNameOperationSpec: coreClient.OperationSpec = {
  path: "/entities/by-name/{kind}/{namespace}/{name}/ancestry",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EntityAncestryResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.kind,
    Parameters.namespace,
    Parameters.name
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getEntitiesByRefsOperationSpec: coreClient.OperationSpec = {
  path: "/entities/by-refs",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.EntitiesBatchResponse
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.fields],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getEntityFacetsOperationSpec: coreClient.OperationSpec = {
  path: "/entity-facets",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EntityFacetsResponse
    }
  },
  queryParameters: [Parameters.filter, Parameters.facet],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const createLocationOperationSpec: coreClient.OperationSpec = {
  path: "/locations",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper:
        Mappers.Paths1Gg6W60LocationsPostResponses200ContentApplicationJsonSchema
    }
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.dryRun],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getLocationsOperationSpec: coreClient.OperationSpec = {
  path: "/locations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Get200ApplicationJsonItemsItem"
            }
          }
        }
      }
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getLocationOperationSpec: coreClient.OperationSpec = {
  path: "/locations/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Location
    }
  },
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteLocationOperationSpec: coreClient.OperationSpec = {
  path: "/locations/{id}",
  httpMethod: "DELETE",
  responses: { 204: {} },
  urlParameters: [Parameters.$host, Parameters.id],
  serializer
};
const analyzeLocationOperationSpec: coreClient.OperationSpec = {
  path: "/analyze-location",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AnalyzeLocationResponse
    }
  },
  requestBody: Parameters.body3,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const validateEntityOperationSpec: coreClient.OperationSpec = {
  path: "/validate-entity",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper:
        Mappers.Paths1ExxmzkValidateEntityPostResponses200ContentApplicationJsonSchema
    }
  },
  requestBody: Parameters.body4,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
